AWSTemplateFormatVersion: 2010-09-09
Parameters:
  VpcCIDRblock:
    Type: String
    Description: Specify your CIDR block for your VPC.
    Default: 10.1.0.0/16
  EnvironmentType:
    Description: Name your EnvironmentType with name you want.
    Type: String
    Default: Prod
    AllowedValues:
      - Dev
      - Prod
  PublicSubnet1CidrBlock:
    Type: String
    Description: Specify your CIDR block for your Public Subnet1
    Default: 10.1.1.0/24
  AvailabilityZoneforPublicSubnet1:
    Type: 'AWS::EC2::AvailabilityZone::Name'
    Description: Specify AZ for public subnet1
    Default: us-west-2a
  PublicSubnet2CidrBlock:
    Type: String
    Description: Specify your CIDR block for your Subnet2
    Default: 10.1.2.0/24
  AvailabilityZoneforPublicSubnet2:
    Type: 'AWS::EC2::AvailabilityZone::Name'
    Description: Specify AZ for public subnet2
    Default: us-west-2b
  PrivateAppSubnet1CidrBlock:
    Type: String
    Description: Specify CIDR block for private APP subnet1
    Default: 10.1.3.0/24
  PrivateAppSubnet2CidrBlock:
    Type: String
    Description: Specify CIDR block for private APP subnet2
    Default: 10.1.4.0/24
  PrivateDBSubnet1CidrBlock:
    Type: String
    Description: Specify CIDR block for private database subnet1
    Default: 10.1.5.0/24
  PrivateDBSubnet2CidrBlock:
    Type: String
    Description: Specify CIDR block for private database subnet2
    Default: 10.1.6.0/24
  AvailabilityZoneforPrivateDBSubnet1:
    Type: 'AWS::EC2::AvailabilityZone::Name'
    Description: Specify AZ for Private DB Subnet1
    Default: us-west-2a
  AvailabilityZoneforPrivateDBSubnet2:
    Type: 'AWS::EC2::AvailabilityZone::Name'
    Description: Specify AZ for Private DB Subnet2
    Default: us-west-2b
  AvailabilityZoneforPrivateAppSubnet1:
    Type: 'AWS::EC2::AvailabilityZone::Name'
    Description: Specify AZ for private subnet1
    Default: us-west-2a
  AvailabilityZoneforPrivateAppSubnet2:
    Type: 'AWS::EC2::AvailabilityZone::Name'
    Description: Specify AZ for private subnet2
    Default: us-west-2b
  EcsServiceLinkedRoleExists:
    Type: String
    Description: Choose true is ECS service linked role already exists in your aws account.
    Default: true
    AllowedValues:
      - true
      - false
  SshCidrIp:
    Type: String
    Description: Enter the IP for which ssh connectivity has to be allowed.
    Default: 0.0.0.0/0
Conditions:
  RoleHasToBeCreated: !Equals [ !Ref EcsServiceLinkedRoleExists, 'false' ]
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDRblock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'false'
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Join [ "-", [!Ref EnvironmentType,"VPC"]]
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: !Ref PublicSubnet1CidrBlock
      AvailabilityZone: !Ref AvailabilityZoneforPublicSubnet1
      MapPublicIpOnLaunch: 'true'
      Tags:
      - Key: Name
        Value: !Join [ "-", [!Ref EnvironmentType,"PublicSubnet1"]]
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: !Ref PublicSubnet2CidrBlock
      AvailabilityZone: !Ref AvailabilityZoneforPublicSubnet2
      MapPublicIpOnLaunch: 'true'
      Tags:
      - Key: Name
        Value: !Join [ "-", [!Ref EnvironmentType,"PublicSubnet2"]]
  PrivateAppSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: !Ref PrivateAppSubnet1CidrBlock
      AvailabilityZone: !Ref AvailabilityZoneforPrivateAppSubnet1
      MapPublicIpOnLaunch: 'false'
      Tags:
      - Key: Name
        Value: !Join [ "-", [!Ref EnvironmentType,"PrivateAppSubnet1"]]
  PrivateAppSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: !Ref PrivateAppSubnet2CidrBlock
      AvailabilityZone: !Ref AvailabilityZoneforPrivateAppSubnet2
      MapPublicIpOnLaunch: 'false'
      Tags:
      - Key: Name
        Value: !Join [ "-", [!Ref EnvironmentType,"PrivateAppSubnet2"]]
  PrivateDBSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: !Ref PrivateDBSubnet1CidrBlock
      AvailabilityZone: !Ref AvailabilityZoneforPrivateDBSubnet1
      MapPublicIpOnLaunch: 'false'
      Tags:
      - Key: Name
        Value: !Join [ "-", [!Ref EnvironmentType,"PrivateDBSubnet1"]]
  PrivateDBSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: !Ref PrivateDBSubnet2CidrBlock
      AvailabilityZone: !Ref AvailabilityZoneforPrivateDBSubnet2
      MapPublicIpOnLaunch: 'false'
      Tags:
      - Key: Name
        Value: !Join [ "-", [!Ref EnvironmentType,"PrivateDBSubnet2"]]
  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [!Ref EnvironmentType,"PublicNetworkAcl"]]
  PublicNWaclAllAllow:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      RuleNumber: 100
      Egress: 'false'
      Protocol: "-1"
      CidrBlock: 0.0.0.0/0
      RuleAction: allow
      NetworkAclId:
        Ref: PublicNetworkAcl
  PublicNWaclOBAllAllow:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      RuleNumber: 100
      Egress: 'true'
      Protocol: "-1"
      CidrBlock: 0.0.0.0/0
      RuleAction: allow
      NetworkAclId:
        Ref: PublicNetworkAcl
  PrivateAPPNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [!Ref EnvironmentType,"PrivateAPPNetworkAcl"]]
  AppNWaclAllAllow:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      RuleNumber: 100
      Egress: 'false'
      Protocol: "-1"
      CidrBlock: 0.0.0.0/0
      RuleAction: allow
      NetworkAclId:
        Ref: PrivateAPPNetworkAcl
  AppNWaclOBAllAllow:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      RuleNumber: 100
      Egress: 'true'
      Protocol: "-1"
      CidrBlock: 0.0.0.0/0
      RuleAction: allow
      NetworkAclId:
        Ref: PrivateAPPNetworkAcl
  PrivateDbNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [!Ref EnvironmentType,"PrivateDbNetworkAcl"]]
  DbNWaclAllAllow:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      RuleNumber: 100
      Egress: 'false'
      Protocol: "-1"
      CidrBlock: 0.0.0.0/0
      RuleAction: allow
      NetworkAclId:
        Ref: PrivateDbNetworkAcl
  DbNWaclOBAllAllow:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      RuleNumber: 100
      Egress: 'true'
      Protocol: "-1"
      CidrBlock: 0.0.0.0/0
      RuleAction: allow
      NetworkAclId:
        Ref: PrivateDbNetworkAcl
  PublicSubnetNetwork1AclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      NetworkAclId:
        Ref: PublicNetworkAcl
  PublicSubnetNetwork2AclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      NetworkAclId:
        Ref: PublicNetworkAcl
  AppSubnetNetwork1AclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PrivateAppSubnet1
      NetworkAclId:
        Ref: PrivateAPPNetworkAcl
  AppSubnetNetwork2AclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PrivateAppSubnet2
      NetworkAclId:
        Ref: PrivateAPPNetworkAcl
  DbSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PrivateDBSubnet1
      NetworkAclId:
        Ref: PrivateDbNetworkAcl
  DbSubnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PrivateDBSubnet2
      NetworkAclId:
        Ref: PrivateDbNetworkAcl
  PublicSubnetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: PublicSecurityGroup
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref SshCidrIp
      - IpProtocol: -1
        FromPort: 0
        ToPort: 65535
        CidrIp: !Ref VpcCIDRblock
      Tags:
      - Key: Name
        Value: !Join [ "-", [!Ref EnvironmentType,"PublicSecurityGroup"]]
  PrivateSubnetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: AlbSecurityGroup
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: -1
        FromPort: 0
        ToPort: 65535
        CidrIp: !Ref VpcCIDRblock
      Tags:
      - Key: Name
        Value: !Join [ "-", [!Ref EnvironmentType,"AlbSecurityGroup"]]
  DBSubnetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: PrivateSecurityGroup
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: -1
        FromPort: 0
        ToPort: 65535
        CidrIp: !Ref VpcCIDRblock
      Tags:
      - Key: Name
        Value: !Join [ "-", [!Ref EnvironmentType,"PrivateSecurityGroup"]]
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Join [ "-", [!Ref EnvironmentType,"InternetGateway"]]
  VpcIGAttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  InternetGatewayRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [!Ref EnvironmentType,"InternetGatewayRouteTable"]]
  PublicSubnet1AssociationtoIGW:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      RouteTableId:
        Ref: InternetGatewayRouteTable
  PublicSubnet2AssociationtoIGW:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      RouteTableId:
        Ref: InternetGatewayRouteTable
  InternetGatewayToInternet:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: InternetGatewayRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  EIPforNATgateway:
    Type: AWS::EC2::EIP
    Properties:
      Domain: !Ref VPC
  NATgateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - EIPforNATgateway
        - AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Join [ "-", [!Ref EnvironmentType,"NATgateway"]]
  NATgatewayRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Join [ "-", [!Ref EnvironmentType,"NATgatewayRouteTable"]]
  NATgatewayRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: NATgatewayRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATgateway
  APPSubnet1AssociationtoNatGW:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateAppSubnet1
      RouteTableId:
        Ref: NATgatewayRouteTable
  APPSubnet2AssociationtoNatGW:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateAppSubnet2
      RouteTableId:
        Ref: NATgatewayRouteTable
  DBSubnet1AssociationtoNatGW:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateDBSubnet1
      RouteTableId:
        Ref: NATgatewayRouteTable
  DBSubnet2AssociationtoNatGW:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateDBSubnet2
      RouteTableId:
        Ref: NATgatewayRouteTable
  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      #Tags:
      #  Key: Name
      #  Value: NikivpcIamRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
                - "ecs-tasks.amazonaws.com"
                - "application-autoscaling.amazonaws.com"
                - "ecs.amazonaws.com"
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
        - arn:aws:iam::aws:policy/AmazonRDSFullAccess
        - arn:aws:iam::aws:policy/AWSLambdaFullAccess
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AmazonECS_FullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonElastiCacheFullAccess
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      RoleName: !Join [ "-", [!Ref EnvironmentType, !Ref "AWS::Region" , NikivpcIamRole]]
  InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        -
          Ref: "IAMRole"
  EcsServiceLinkedRole:
    Type: "AWS::IAM::ServiceLinkedRole"
    Condition: RoleHasToBeCreated
    Properties:
      AWSServiceName: "ecs.amazonaws.com"
  S3BucketForAlbLogs:
    Type: AWS::S3::Bucket
    Properties:
      Tags:
        -
          Key: "Purpose"
          Value: "AlbLogsStorage"
Outputs:
  VpcId:
    Value: !Ref VPC
  PublicSubnet1:
    Value: !Ref PublicSubnet1
  PublicSubnet2:
    Value: !Ref PublicSubnet2
  PrivateAppSubnet1:
    Value: !Ref PrivateAppSubnet1
  PrivateAppSubnet2:
    Value: !Ref PrivateAppSubnet2
  PrivateDBSubnet1:
    Value: !Ref PrivateDBSubnet1
  PrivateDBSubnet2:
    Value: !Ref PrivateDBSubnet2
  SecurityGroupPublic:
    Value: !Ref 'PublicSubnetSecurityGroup'
  SecurityGroupPrivate:
    Value: !Ref 'PrivateSubnetSecurityGroup'
  SecurityGroupDb:
    Value: !Ref 'DBSubnetSecurityGroup'
  IAMRole:
    Value: !Ref 'IAMRole'
  IamRoleArn:
    Value: !GetAtt IAMRole.Arn
  IamRoleInstanceProfile:
    Value: !Ref 'InstanceProfile'
  AlbLogsS3Bucket:
    Value: !Ref 'S3BucketForAlbLogs'
